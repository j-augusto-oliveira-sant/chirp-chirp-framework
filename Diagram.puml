@startuml Diagrama

'Facade (Structural Pattern)'
class AudioFile {
    - volume: float
    - speed: float
    - path: String
    - fileName: String
    - processorComposer: AudioProcessorComposer

    + play(): void
    + play(durationInSeconds: int): void
    + save(outputFilePath: String, durationInSeconds: int): void
    + save(durationInSeconds: int): void
    - saveAudioFile(outputFilePath: String, durationInSeconds: int, incomplete: boolean): void
    - playAudioFile(durationInSeconds: int,incomplete: boolean): void
    + reset(): void
    - applyEffects(buffer: byte[], bytesRead: int, format: AudioFormat): void
    - AudioFile(volume: float, path: String, fileName: String)
}

'Composite (Structural Pattern)'
class AudioProcessorComposer {
    - processors: ArrayList<AudioProcessor>
    + AudioProcessorComposer()
    + getProcessors(): ArrayList<AudioProcessor>
    + setProcessors(ArrayList<AudioProcessor> processors): void
    + withReverb(): AudioProcessorComposer
    + withReverb(delay: float): AudioProcessorComposer
    + withPhaser(): AudioProcessorComposer
    + withPhaser(float modulationRate, float modulationDepth): AudioProcessorComposer
    + withChorus(): AudioProcessorComposer
    + withChorus(delay: float): AudioProcessorComposer
    + withTremolo(): AudioProcessorComposer
    + clearEffects(): void
}

'Factory (Creational Pattern)'
class AudioFileFactory {
    + loadAudioFile(path: String): AudioFile
}

'Strategy (Behavioral Pattern)'
interface AudioProcessor {
    + process(buffer: byte[], int bytesRead, AudioFormat format): void
}

class ReverbProcessor implements AudioProcessor {
    + process
}
class ChorusProcessor implements AudioProcessor {
    + process
}
class PhaserProcessor implements AudioProcessor {
    + process
}
class TremoloProcessor implements AudioProcessor {
    + process
}

'Association'
AudioFileFactory --> AudioFile : 'creates' (1..1)
AudioFile --> AudioProcessorComposer : 'uses' (1..1)
AudioProcessorComposer --> AudioProcessor : (0..*)

@enduml